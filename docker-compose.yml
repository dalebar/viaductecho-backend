version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: viaduct_echo
      POSTGRES_USER: viaduct
      POSTGRES_PASSWORD: echo_secure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U viaduct -d viaduct_echo"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Viaduct Echo API
  api:
    build: .
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Database configuration
      DATABASE_URL: postgresql://viaduct:echo_secure_password@postgres:5432/viaduct_echo

      # API configuration
      CORS_ORIGINS: "*"
      API_TITLE: "Viaduct Echo API"
      API_VERSION: "1.0.0"

      # OpenAI configuration (set in .env file)
      # OPENAI_API_KEY: your_openai_api_key

      # GitHub configuration (set in .env file)
      # GITHUB_TOKEN: your_github_token
      # GITHUB_REPO: your_repo
      # GITHUB_BRANCH: main
    ports:
      - "8000:8000"
    restart: unless-stopped
    volumes:
      - ./.env:/app/.env:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Viaduct Echo Aggregator (News fetching service)
  aggregator:
    build: .
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Database configuration
      DATABASE_URL: postgresql://viaduct:echo_secure_password@postgres:5432/viaduct_echo

      # OpenAI configuration (set in .env file)
      # OPENAI_API_KEY: your_openai_api_key

      # GitHub configuration (set in .env file)
      # GITHUB_TOKEN: your_github_token
      # GITHUB_REPO: your_repo
      # GITHUB_BRANCH: main
    volumes:
      - ./.env:/app/.env:ro
    restart: unless-stopped
    command: ["python", "-m", "src.main"]

  # Redis for caching (optional, for future enhancements)
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:
  redis_data:
